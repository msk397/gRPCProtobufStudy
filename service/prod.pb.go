// 这个就是protobuf的中间文件

// 指定的当前proto语法的版本，有2和3

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.7
// source: prod.proto

// 指定等会文件生成出来的package

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 定义request model
type ProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProdId int32 `protobuf:"varint,1,opt,name=prod_id,json=prodId,proto3" json:"prod_id,omitempty"` // 1代表顺序
}

func (x *ProductRequest) Reset() {
	*x = ProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prod_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductRequest) ProtoMessage() {}

func (x *ProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prod_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductRequest.ProtoReflect.Descriptor instead.
func (*ProductRequest) Descriptor() ([]byte, []int) {
	return file_prod_proto_rawDescGZIP(), []int{0}
}

func (x *ProductRequest) GetProdId() int32 {
	if x != nil {
		return x.ProdId
	}
	return 0
}

type Content struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *Content) Reset() {
	*x = Content{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prod_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Content) ProtoMessage() {}

func (x *Content) ProtoReflect() protoreflect.Message {
	mi := &file_prod_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Content.ProtoReflect.Descriptor instead.
func (*Content) Descriptor() ([]byte, []int) {
	return file_prod_proto_rawDescGZIP(), []int{1}
}

func (x *Content) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 定义response model
type ProductResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProdStock int32      `protobuf:"varint,1,opt,name=prod_stock,json=prodStock,proto3" json:"prod_stock,omitempty"`
	User      *User      `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Data      *anypb.Any `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ProductResponse) Reset() {
	*x = ProductResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prod_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductResponse) ProtoMessage() {}

func (x *ProductResponse) ProtoReflect() protoreflect.Message {
	mi := &file_prod_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductResponse.ProtoReflect.Descriptor instead.
func (*ProductResponse) Descriptor() ([]byte, []int) {
	return file_prod_proto_rawDescGZIP(), []int{2}
}

func (x *ProductResponse) GetProdStock() int32 {
	if x != nil {
		return x.ProdStock
	}
	return 0
}

func (x *ProductResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *ProductResponse) GetData() *anypb.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_prod_proto protoreflect.FileDescriptor

var file_prod_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x29, 0x0a, 0x0e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x70, 0x72, 0x6f, 0x64, 0x49, 0x64, 0x22, 0x1b, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x22, 0x7d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x5f,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x21, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x32, 0xc0, 0x02, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x17, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x12, 0x52, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x47, 0x0a,
	0x0e, 0x53, 0x61, 0x79, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2e, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_prod_proto_rawDescOnce sync.Once
	file_prod_proto_rawDescData = file_prod_proto_rawDesc
)

func file_prod_proto_rawDescGZIP() []byte {
	file_prod_proto_rawDescOnce.Do(func() {
		file_prod_proto_rawDescData = protoimpl.X.CompressGZIP(file_prod_proto_rawDescData)
	})
	return file_prod_proto_rawDescData
}

var file_prod_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_prod_proto_goTypes = []interface{}{
	(*ProductRequest)(nil),  // 0: service.ProductRequest
	(*Content)(nil),         // 1: service.content
	(*ProductResponse)(nil), // 2: service.ProductResponse
	(*User)(nil),            // 3: service.User
	(*anypb.Any)(nil),       // 4: google.protobuf.Any
}
var file_prod_proto_depIdxs = []int32{
	3, // 0: service.ProductResponse.user:type_name -> service.User
	4, // 1: service.ProductResponse.data:type_name -> google.protobuf.Any
	0, // 2: service.ProdService.GetProductStock:input_type -> service.ProductRequest
	0, // 3: service.ProdService.UpdateStockClientStream:input_type -> service.ProductRequest
	0, // 4: service.ProdService.GetProductStockServerStream:input_type -> service.ProductRequest
	0, // 5: service.ProdService.SayHelloStream:input_type -> service.ProductRequest
	2, // 6: service.ProdService.GetProductStock:output_type -> service.ProductResponse
	2, // 7: service.ProdService.UpdateStockClientStream:output_type -> service.ProductResponse
	2, // 8: service.ProdService.GetProductStockServerStream:output_type -> service.ProductResponse
	2, // 9: service.ProdService.SayHelloStream:output_type -> service.ProductResponse
	6, // [6:10] is the sub-list for method output_type
	2, // [2:6] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_prod_proto_init() }
func file_prod_proto_init() {
	if File_prod_proto != nil {
		return
	}
	file_user_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_prod_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prod_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Content); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prod_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_prod_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_prod_proto_goTypes,
		DependencyIndexes: file_prod_proto_depIdxs,
		MessageInfos:      file_prod_proto_msgTypes,
	}.Build()
	File_prod_proto = out.File
	file_prod_proto_rawDesc = nil
	file_prod_proto_goTypes = nil
	file_prod_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ProdServiceClient is the client API for ProdService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProdServiceClient interface {
	// 定义方法
	GetProductStock(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductResponse, error)
	// 客户端流
	UpdateStockClientStream(ctx context.Context, opts ...grpc.CallOption) (ProdService_UpdateStockClientStreamClient, error)
	// 服务端流
	GetProductStockServerStream(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (ProdService_GetProductStockServerStreamClient, error)
	// 双向流,心跳检测
	SayHelloStream(ctx context.Context, opts ...grpc.CallOption) (ProdService_SayHelloStreamClient, error)
}

type prodServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProdServiceClient(cc grpc.ClientConnInterface) ProdServiceClient {
	return &prodServiceClient{cc}
}

func (c *prodServiceClient) GetProductStock(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	out := new(ProductResponse)
	err := c.cc.Invoke(ctx, "/service.ProdService/GetProductStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodServiceClient) UpdateStockClientStream(ctx context.Context, opts ...grpc.CallOption) (ProdService_UpdateStockClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProdService_serviceDesc.Streams[0], "/service.ProdService/UpdateStockClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &prodServiceUpdateStockClientStreamClient{stream}
	return x, nil
}

type ProdService_UpdateStockClientStreamClient interface {
	Send(*ProductRequest) error
	CloseAndRecv() (*ProductResponse, error)
	grpc.ClientStream
}

type prodServiceUpdateStockClientStreamClient struct {
	grpc.ClientStream
}

func (x *prodServiceUpdateStockClientStreamClient) Send(m *ProductRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *prodServiceUpdateStockClientStreamClient) CloseAndRecv() (*ProductResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ProductResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *prodServiceClient) GetProductStockServerStream(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (ProdService_GetProductStockServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProdService_serviceDesc.Streams[1], "/service.ProdService/GetProductStockServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &prodServiceGetProductStockServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProdService_GetProductStockServerStreamClient interface {
	Recv() (*ProductResponse, error)
	grpc.ClientStream
}

type prodServiceGetProductStockServerStreamClient struct {
	grpc.ClientStream
}

func (x *prodServiceGetProductStockServerStreamClient) Recv() (*ProductResponse, error) {
	m := new(ProductResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *prodServiceClient) SayHelloStream(ctx context.Context, opts ...grpc.CallOption) (ProdService_SayHelloStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProdService_serviceDesc.Streams[2], "/service.ProdService/SayHelloStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &prodServiceSayHelloStreamClient{stream}
	return x, nil
}

type ProdService_SayHelloStreamClient interface {
	Send(*ProductRequest) error
	Recv() (*ProductResponse, error)
	grpc.ClientStream
}

type prodServiceSayHelloStreamClient struct {
	grpc.ClientStream
}

func (x *prodServiceSayHelloStreamClient) Send(m *ProductRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *prodServiceSayHelloStreamClient) Recv() (*ProductResponse, error) {
	m := new(ProductResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProdServiceServer is the server API for ProdService service.
type ProdServiceServer interface {
	// 定义方法
	GetProductStock(context.Context, *ProductRequest) (*ProductResponse, error)
	// 客户端流
	UpdateStockClientStream(ProdService_UpdateStockClientStreamServer) error
	// 服务端流
	GetProductStockServerStream(*ProductRequest, ProdService_GetProductStockServerStreamServer) error
	// 双向流,心跳检测
	SayHelloStream(ProdService_SayHelloStreamServer) error
}

// UnimplementedProdServiceServer can be embedded to have forward compatible implementations.
type UnimplementedProdServiceServer struct {
}

func (*UnimplementedProdServiceServer) GetProductStock(context.Context, *ProductRequest) (*ProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductStock not implemented")
}
func (*UnimplementedProdServiceServer) UpdateStockClientStream(ProdService_UpdateStockClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateStockClientStream not implemented")
}
func (*UnimplementedProdServiceServer) GetProductStockServerStream(*ProductRequest, ProdService_GetProductStockServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetProductStockServerStream not implemented")
}
func (*UnimplementedProdServiceServer) SayHelloStream(ProdService_SayHelloStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHelloStream not implemented")
}

func RegisterProdServiceServer(s *grpc.Server, srv ProdServiceServer) {
	s.RegisterService(&_ProdService_serviceDesc, srv)
}

func _ProdService_GetProductStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdServiceServer).GetProductStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ProdService/GetProductStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdServiceServer).GetProductStock(ctx, req.(*ProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdService_UpdateStockClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProdServiceServer).UpdateStockClientStream(&prodServiceUpdateStockClientStreamServer{stream})
}

type ProdService_UpdateStockClientStreamServer interface {
	SendAndClose(*ProductResponse) error
	Recv() (*ProductRequest, error)
	grpc.ServerStream
}

type prodServiceUpdateStockClientStreamServer struct {
	grpc.ServerStream
}

func (x *prodServiceUpdateStockClientStreamServer) SendAndClose(m *ProductResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *prodServiceUpdateStockClientStreamServer) Recv() (*ProductRequest, error) {
	m := new(ProductRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ProdService_GetProductStockServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProductRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProdServiceServer).GetProductStockServerStream(m, &prodServiceGetProductStockServerStreamServer{stream})
}

type ProdService_GetProductStockServerStreamServer interface {
	Send(*ProductResponse) error
	grpc.ServerStream
}

type prodServiceGetProductStockServerStreamServer struct {
	grpc.ServerStream
}

func (x *prodServiceGetProductStockServerStreamServer) Send(m *ProductResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ProdService_SayHelloStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProdServiceServer).SayHelloStream(&prodServiceSayHelloStreamServer{stream})
}

type ProdService_SayHelloStreamServer interface {
	Send(*ProductResponse) error
	Recv() (*ProductRequest, error)
	grpc.ServerStream
}

type prodServiceSayHelloStreamServer struct {
	grpc.ServerStream
}

func (x *prodServiceSayHelloStreamServer) Send(m *ProductResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *prodServiceSayHelloStreamServer) Recv() (*ProductRequest, error) {
	m := new(ProductRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ProdService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.ProdService",
	HandlerType: (*ProdServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProductStock",
			Handler:    _ProdService_GetProductStock_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UpdateStockClientStream",
			Handler:       _ProdService_UpdateStockClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetProductStockServerStream",
			Handler:       _ProdService_GetProductStockServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SayHelloStream",
			Handler:       _ProdService_SayHelloStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "prod.proto",
}
